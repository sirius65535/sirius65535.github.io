<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>浮点数、定点数</title>
      <link href="/2018/03/21/%E6%B5%AE%E7%82%B9%E6%95%B0%E3%80%81%E5%AE%9A%E7%82%B9%E6%95%B0/"/>
      <url>/2018/03/21/%E6%B5%AE%E7%82%B9%E6%95%B0%E3%80%81%E5%AE%9A%E7%82%B9%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="什么是定点数"><a href="#什么是定点数" class="headerlink" title="什么是定点数"></a>什么是定点数</h1><h2 id="通俗的解释"><a href="#通俗的解释" class="headerlink" title="通俗的解释"></a>通俗的解释</h2><p>​    定点数指小数点在数中的位置是固定不变的，通常有定点整数和定点小数。在对小数点位置作出选择之后，运算中的所有数均应统一为定点整数或定点小数，在运算中不再考虑小数问题。</p><a id="more"></a> <p>​    以人民币为例，我们日常经常说到的如123.45￥，789.34￥等等，默认的情况下，小数点后面有两位小数，即角，分。如果小数点在最高有效位的前面，则这样的数称为纯小数的定点数，如0.12345，0.78934等。如果小数点在最低有效位的后面，则这样的数称为纯整数的定点数，如12345，78934等。</p><h2 id="专业的说法"><a href="#专业的说法" class="headerlink" title="专业的说法"></a>专业的说法</h2><p>​    所谓定点格式，即<strong><em>约定机器中所有数据的小数点位置是固定不变的</em></strong>。通常将定点数据表示成纯小数或纯整数，为了将数表示成纯小数，通常把小数点固定在数值部分的最高位之前；而为了将数表示成纯整数，则把小数点固定在数值部分的最后面，如下图所示：</p><p><img src="http://mypic666.test.upcdn.net/052235097517088.png" alt=""></p><h1 id="什么是浮点数"><a href="#什么是浮点数" class="headerlink" title="什么是浮点数"></a>什么是浮点数</h1><h2 id="通俗的解释-1"><a href="#通俗的解释-1" class="headerlink" title="通俗的解释"></a>通俗的解释</h2><p>​    浮点数：一般说来，小数点不固定的数。比较容易的理解方式是，考虑以下我们日常见到的科学记数法，拿我们上面的数字举例，如123.45，可以写成以下几种形式</p><p>如：</p><p>12.345x10^1^</p><p>1.2345 x10^2^</p><p>0.12345 x10^3^</p><p>……</p><p>为了表示一个数，小数点的位置可以变化，即小数点不固定。</p><h2 id="专业的说法-1"><a href="#专业的说法-1" class="headerlink" title="专业的说法"></a>专业的说法</h2><p>​    定点数表示法的缺点在于其形式过于僵硬，固定的小数点位置决定了固定位数的整数部分和小数部分，不利于同时表达特别大或特别小的数，最终，绝大多数现代的计算机系统采纳了浮点数表达方式，这种表达方式利用科学计数法来表达实数，即用一个尾数(Mantissa，尾数有时也称为<strong><em>有效数字</em></strong>，它实际上是有效数字的非正式说法)，一个基数(Base)，一个指数(Exponent)以及一个表示正负的符号来表达实数，比如123.45用十进制科学计数法可以表示为1.2345x10^2^，其中1.2345为尾数，10为基数，2为指数。浮点数利用指数达到了浮动小数点的效果，从而可以灵活地表达更大范围的实数。</p><h1 id="定点数与浮点数的对比"><a href="#定点数与浮点数的对比" class="headerlink" title="定点数与浮点数的对比"></a>定点数与浮点数的对比</h1><p>​    定点表示法运算直观，但数的表示范围较小，不同的数运算时要考虑比例因子的选取，以防止溢出。浮点表示法运算时可以不考虑溢出，但浮点运算，编程较难。要掌握定、浮点数的转换方法及浮点数规格化方法。</p><h2 id="表示的精度与范围不同"><a href="#表示的精度与范围不同" class="headerlink" title="表示的精度与范围不同"></a>表示的精度与范围不同</h2><p>​    例如，我们用4个十进制数来表达一个数字。对于定点数（这里以定点整数为例），我们表示区间[0000，9999]中的任何一个数字，但是如果我们要想表示类似1234.3的数值就无能为力了，因为此时的表示精度为1/10^0^=1；如果采用浮点数来表示（以归整的科学记数法，即小数点前有一位有效位，为例），则可以表示[0.000，9.999]之间的任何一个数字，表示的精度为1/10^3^=0.001，精度比上一种方式提高了很多，但是表示的范围却小了很多。</p><p>​    也就是说，一般的，定点数表示的精度较低，但表示的数值范围较大；而浮点数恰恰相反。</p><h2 id="计算机中运算的效率不同"><a href="#计算机中运算的效率不同" class="headerlink" title="计算机中运算的效率不同"></a>计算机中运算的效率不同</h2><p>​    一般说来，定点数的运算在计算机中实现起来比较简单，效率较高；而浮点数的运算在计算机中实现起来比较复杂，效率相对较低。</p><h2 id="硬件依赖性"><a href="#硬件依赖性" class="headerlink" title="硬件依赖性"></a>硬件依赖性</h2><p>​    一般说来，只要有硬件提供运算的部件，就会提供定点数运算的支持（不知道说的确切否，没有听说过不支持定点数运算的硬件），但不一定支持浮点数运算，如有的很多嵌入式开发板就不提供浮点运算的支持。</p><h1 id="浮点数的存储格式"><a href="#浮点数的存储格式" class="headerlink" title="浮点数的存储格式"></a>浮点数的存储格式</h1><h2 id="IEEE-浮点格式规范"><a href="#IEEE-浮点格式规范" class="headerlink" title="IEEE 浮点格式规范"></a>IEEE 浮点格式规范</h2><p>​    浮点数的小数点是不固定的，如果每个人都按照自己的爱好存储在电脑里，那不就乱套了吗？那么怎么在计算机中存储这种类型的数字呢？象这类古老的问题前人早都为我们做好了相应的规范，无规矩不成方圆吗。我们平时所说的浮点数的存储规范，就是由IEEE指定的，具体的规范文件是：IEEE Standard 754 for Binary Floating-Point Arithmetic。大家可以很容易的从网络上下载到这篇文档。</p><h2 id="单精度浮点"><a href="#单精度浮点" class="headerlink" title="单精度浮点"></a>单精度浮点</h2><p>在c语言中，<strong>单精度（float）数据类型为32bits</strong>，具体的如下图所示：</p><p><img src="http://files.jb51.net/file_images/article/201606/2016617102352889.png" alt=""></p><p><strong>整个32bits分三部分，即</strong></p><p>　　Sign：符号位，1 bit，0为正，1为负；</p><p>　　Exponent(bias)：指数部分，8 bits，存储格式为移码存储（后面还会说明），偏移量为127；</p><p>　　Mantissa(fraction)：尾数部分。</p><h2 id="双精度浮点"><a href="#双精度浮点" class="headerlink" title="双精度浮点"></a>双精度浮点</h2><p>　　<strong>对应的双精度（double）类型的格式为：</strong></p><p><img src="http://files.jb51.net/file_images/article/201606/2016617102402031.png" alt=""></p><p>​    同样，64位也被分为了三部分，对照单精度，不用我说就可以理解各个部分的含义了吧？</p><p>　　是不是有点迷糊了，不要怕，理论这个东西最能忽悠人了，看起来很高深，其实也就是个屁大的事，举个例子就很容易明白了。</p><p>举例说明，如3.24x10^3^，则对应的部分为，Sign为0，3为指数部分（注意计算机里面存储的不是3，这里仅仅为了说明），3.24为尾数。我们知道，计算机“笨”的要死，只认识0和1，那么到底一个浮点数值在计算机存储介质中是如何存储的呢？</p><p>例如，我们要想偷窥浮点类型的值4.25在计算机硬盘中存储的庐山真面目，请跟我来：首先把4.25转换成二进制的表达方式，即100.01，在详细点，变成1.0001x2^2^，好了，对号入座把。</p><p>Sign=0;</p><p>Exponent(bias)=2+127=129 （偏移量为127，就是直接加上个127了）；</p><p>Mantissa=1.0001-1.0=0001（规格化后，小数点前总是整数1，全世界人都知道前面是1不是0，所以省略不写了，即尾数部分不包括整数部分；当别人问你，为什么23 bit的尾数部分可以表示24位的精度，知道怎么回答了吧。 靠，什么，没有看懂，再仔细读两便就知道了）。</p><p><img src="http://files.jb51.net/file_images/article/201606/2016617102409132.png" alt=""></p><p>​    对照上面的图示，相信你已经看明白了吧？相信你的智商。为了加深认识，再来一个。如果给定你一个二进制数字串</p><p>01000000100010000000000000000000</p><p>并告诉你这是一个float类型的值，让你说出它是老几，知道怎么算了吧？如果不知道，看下面的图，我就不废话解释了。</p><p><img src="http://files.jb51.net/file_images/article/201606/2016617102421605.png" alt=""></p><h1 id="浮点定点转换"><a href="#浮点定点转换" class="headerlink" title="浮点定点转换"></a>浮点定点转换</h1><h2 id="Q格式定标法"><a href="#Q格式定标法" class="headerlink" title="Q格式定标法"></a>Q格式定标法</h2><p>​    通过假定小数点位于哪一位(Q)的右侧，从而确定小数的精度，以下为32位数Q定标表格。</p><table><thead><tr><th style="text-align:center">Q表示</th><th style="text-align:center">十进制浮点数表示范围</th><th style="text-align:center">精度</th></tr></thead><tbody><tr><td style="text-align:center">Q=31</td><td style="text-align:center">-1≤x≤0.999 999 999</td><td style="text-align:center">2^(-31)</td></tr><tr><td style="text-align:center">Q=30</td><td style="text-align:center">-2≤x≤1.999 999 999</td><td style="text-align:center">2^(-30)</td></tr><tr><td style="text-align:center">Q=29</td><td style="text-align:center">-4≤x≤3.999 999 998</td><td style="text-align:center">2^(-29)</td></tr><tr><td style="text-align:center">Q=28</td><td style="text-align:center">-8≤x≤7.999 999 996</td><td style="text-align:center">2^(-28)</td></tr><tr><td style="text-align:center">Q=27</td><td style="text-align:center">-16≤x≤15.999 999 993</td><td style="text-align:center">2^(-27)</td></tr><tr><td style="text-align:center">Q=26</td><td style="text-align:center">-32≤x≤31.999 999 985</td><td style="text-align:center">2^(-26)</td></tr><tr><td style="text-align:center">Q=25</td><td style="text-align:center">-64≤x≤63.999 999 970</td><td style="text-align:center">2^(-25)</td></tr><tr><td style="text-align:center">Q=24</td><td style="text-align:center">-128≤x≤127.999 999 940</td><td style="text-align:center">2^(-24)</td></tr><tr><td style="text-align:center">Q=23</td><td style="text-align:center">-256≤x≤255.999 999 981</td><td style="text-align:center">2^(-23)</td></tr><tr><td style="text-align:center">Q=22</td><td style="text-align:center">-512≤x≤511.999 999 762</td><td style="text-align:center">2^(-22)</td></tr><tr><td style="text-align:center">Q=21</td><td style="text-align:center">-1024≤x≤1023.999 999 523</td><td style="text-align:center">2^(-21)</td></tr><tr><td style="text-align:center">Q=20</td><td style="text-align:center">-2048≤x≤2047.999 999 046</td><td style="text-align:center">2^(-20)</td></tr><tr><td style="text-align:center">Q=19</td><td style="text-align:center">-4096≤x≤4095.999 998 093</td><td style="text-align:center">2^(-19)</td></tr><tr><td style="text-align:center">Q=18</td><td style="text-align:center">-8192≤x≤8191.999 996 185</td><td style="text-align:center">2^(-18)</td></tr><tr><td style="text-align:center">Q=17</td><td style="text-align:center">-16384≤x≤16363.999 992 371</td><td style="text-align:center">2^(-17)</td></tr><tr><td style="text-align:center">Q=16</td><td style="text-align:center">-32768≤x≤32767.999 984 741</td><td style="text-align:center">2^(-16)</td></tr><tr><td style="text-align:center">Q=15</td><td style="text-align:center">-65536≤x≤65535.999 969 482</td><td style="text-align:center">2^(-15)</td></tr><tr><td style="text-align:center">Q=14</td><td style="text-align:center">-131072≤x≤131071.999 938 965</td><td style="text-align:center">2^(-14)</td></tr><tr><td style="text-align:center">Q=13</td><td style="text-align:center">-262144≤x≤262143.999 877 930</td><td style="text-align:center">2^(-13)</td></tr><tr><td style="text-align:center">Q=12</td><td style="text-align:center">-5244288≤x≤524287.999 755 859</td><td style="text-align:center">2^(-12)</td></tr><tr><td style="text-align:center">Q=11</td><td style="text-align:center">-1048576≤x≤1048575.999 511 719</td><td style="text-align:center">2^(-11)</td></tr><tr><td style="text-align:center">Q=10</td><td style="text-align:center">-2097152≤x≤2097151.999 511 719</td><td style="text-align:center">2^(-10)</td></tr><tr><td style="text-align:center">Q=9</td><td style="text-align:center">-4194304≤x≤4194302.998 046 875</td><td style="text-align:center">2^(-9)</td></tr><tr><td style="text-align:center">Q=8</td><td style="text-align:center">-8388608≤x≤8388607.996 093 750</td><td style="text-align:center">2^(-8)</td></tr><tr><td style="text-align:center">Q=7</td><td style="text-align:center">-16777216≤x≤16777215.992 187 500</td><td style="text-align:center">2^(-7)</td></tr><tr><td style="text-align:center">Q=6</td><td style="text-align:center">-33554432≤x≤33554431.984 375 000</td><td style="text-align:center">2^(-6)</td></tr><tr><td style="text-align:center">Q=5</td><td style="text-align:center">-67108864≤x≤67108863.968 750 000</td><td style="text-align:center">2^(-5)</td></tr><tr><td style="text-align:center">Q=4</td><td style="text-align:center">-134217728≤x≤134217727.937 500 000</td><td style="text-align:center">2^(-4)</td></tr><tr><td style="text-align:center">Q=3</td><td style="text-align:center">-268435456≤x≤268435455.875 000 000</td><td style="text-align:center">2^(-3)</td></tr><tr><td style="text-align:center">Q=2</td><td style="text-align:center">-536870912≤x≤536870911.750 000 000</td><td style="text-align:center">2^(-2)</td></tr><tr><td style="text-align:center">Q=1</td><td style="text-align:center">-1073741824≤x≤1073741823.500 000 000</td><td style="text-align:center">2^(-1)</td></tr><tr><td style="text-align:center">Q=0</td><td style="text-align:center">-2147483648≤x≤2147483647</td><td style="text-align:center">2^0</td></tr></tbody></table><h2 id="转换关系"><a href="#转换关系" class="headerlink" title="转换关系"></a>转换关系</h2><p>浮点数(X)转换为定点数(Xq)：<code>Xq=(int)X* 2^Q</code></p><p>定点数(Xq)转换为浮点数(X)：<code>X=(float)Xq*2^(-Q)</code></p><p><strong>Example:</strong></p><p>将浮点数X = 0.5转换为32位Q定标的定点数：</p><ul><li><p><strong>(1)由于-1≤X≤0.999 999 999</strong>，按照上述表格所以我们取Q = 31，</p><p>即定点数：Xq=(int)X<em> 2^Q = (int)(0.5 </em> 2^31) = 1073741842;</p><p>反之知道定点数Xq = 1073741842 反推其浮点数如下</p><p>则X=(float)Xq<em>2^(-Q) = (float)1073741842</em>2^(-31) = 0.5;</p><p>​    按照上述如果我们取Q = 31，如果我们要计算浮点的0.5<em>0.5，则相当于计算定点的1073741842 </em> 1073741842 这个数实在是太大了，只能用long long型装下，而非一个字(int)可以装下。通过观察0.5这个数我们只需要保证表格中的Q值对应的精度比0.5更小即可，如此我们重新选择Q：</p></li><li><p><strong>(2)由于-536870912≤x≤536870911.750 000 000</strong>，按照上述表格我们取Q = 2， 即定点数：Xq=(int)X<em> 2^Q = (int)(0.5 </em> 2^2) = 2; 反之知道定点数Xq = 2 反推其浮点数如下 则X=(float)Xq<em>2^(-2) = (float)2</em>2^(-2) = 0.5; 按照上述如果我们取Q = 2，如果我们要计算浮点的0.5<em>0.5，则相当于计算定点的2 </em> 2，一个char就可以装下了。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮点数 </tag>
            
            <tag> 定点数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机字符编码</title>
      <link href="/2016/09/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
      <url>/2016/09/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="计算机编码"><a href="#计算机编码" class="headerlink" title="计算机编码"></a>计算机编码</h1><h2 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h2><p>很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到8个开关状态是好的，于是他们把这称为”字节”。</p><p>再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”计算机”</p><p>开始计算机只在美国用。八位的字节一共可以组合出256(2的8次方)种不同的状态。</p><p>他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端、打印机遇上约定好的这些字节被传过来时，就要做一些约定的动作。遇上00x10, 终端就换行，遇上0x07, 终端就向人们嘟嘟叫，例好遇上0x1b, 打印机就打印反白的字，或者终端就用彩色显示字母。他们看到这样很好，于是就把这些0x20以下的字节状态称为”控制码”。</p><p>他们又把所有的空格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做 ANSI 的”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><strong>字符(Character)</strong> 是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。</li><li><strong>字符集(Character set)</strong> 是一个系统支持的所有抽象字符的集合。通常以二维表的形式存在，二维表的内容和大小是由使用者的语言而定。如ASCII,GBxxx,Unicode等。</li><li><strong>字符编码(Character encoding)</strong> 是把字符集中的字符编码为特定的二进制数，以便在计算机中存储。每个字符集中的字符都对应一个唯一的二进制编码。</li></ul><h1 id="常见字符集及编码"><a href="#常见字符集及编码" class="headerlink" title="常见字符集及编码"></a>常见字符集及编码</h1><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p><strong>ASCII(American Standard Code for Information Interchange, 美国信息交换标准代码)</strong>是基于拉丁字母的一套电脑编码系统，使用7个或8个二进制位进行编码的方案，最多可以给256个字符 (包括字母、数字、标点符号、控制字符及其他符号)分配(或指定)数值。 它主要用于显示现代英语，而其扩展版本EASCII则可以部分支持其他西欧语言，并等同于国际标准<strong>ISO/IEC 646</strong>。</p><p>ASCII码于1961年提出，用于在不同计算机硬件和软件系统中实现数据传输标准化，在大多数的小型机和全部的个人计算机都使用此码。ASCII码划分为两个集合：128个字符的标准ASCII码和附加的128个字符的扩充和ASCII码。</p><p> 目前使用最广泛的西文字符集及其编码是 ASCII 字符集和 ASCII 码（ ASCII 是 American Standard Code for Information Interchange 的缩写），它同时也被国际标准化组织（ International Organization for Standardization, ISO ）批准为国际标准。</p><p> 基本的 ASCII 字符集共有 128 个字符，其中有 96 个可打印字符，包括常用的字母、数字、标点符号等，另外还有 32 个控制字符。标准 ASCII 码使用 7 个二进位对字符进行编码，对应的 ISO 标准为 ISO646 标准。下表展示了基本 ASCII 字符集及其编码：</p><p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=c05506e79482d158af8f51e3e16372bd/c2fdfc039245d688c56332adacc27d1ed21b2451.jpg" alt=""></p><p>Unicode,GBXXX,UTF-8等字符编码都兼容ASCII编码。</p><p><strong>EASCII</strong>(Extended ASCII，延伸美国标准信息交换码)是将ASCII码由7位扩充为8位而成。EASCII的内码是由0到255共有256个字符组成。EASCII码比ASCII码扩充出来的符号包括表格符号、计算符号、希腊字母和特殊的拉丁符号。</p><h2 id="MBCS"><a href="#MBCS" class="headerlink" title="MBCS"></a>MBCS</h2><p>为了扩充ASCII编码，以用于显示本国的语言，不同的国家和地区制定了不同的标准，由此产生了 GB2312, BIG5, JIS 等各自的编码标准。这些使用 2 个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码，又称为”MBCS（Muilti-Bytes Charecter Set，多字节字符集）”。在简体中文系统下，ANSI 编码代表 GB2312 编码，在日文操作系统下，ANSI 编码代表 JIS 编码，所以在中文 windows下要转码成gb2312,gbk只需要把文本保存为ANSI 编码即可。 不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。一个很大的缺点是，同一个编码值，在不同的编码体系里代表着不同的字。这样就容易造成混乱。</p><p>导致了unicode码的诞生。 其中每个语言下的ANSI编码，都有一套一对一的编码转换器，Unicode变成所有编码转换的中间介质。所有的编码都有一个转换器可以转换到Unicode，而Unicode也可以转换到其他所有的编码。</p><h2 id="GB2312字符集-amp-编码"><a href="#GB2312字符集-amp-编码" class="headerlink" title="GB2312字符集&amp;编码"></a>GB2312字符集&amp;编码</h2><p><strong>GB 2312</strong> 或称 <strong>GB 2312–80</strong> 是中华人民共和国国家标准简体中文字符集，全称《<strong>信息交换用汉字编码字符集·基本集</strong>》，又称<strong>GB0</strong>，由中国国家标准总局发布，1981年5月1日实施。GB 2312编码通行于中国大陆；新加坡等地也采用此编码。中国大陆几乎所有的中文系统和国际化的软件都支持GB 2312。</p><p><strong>字符集范围</strong></p><p>GB 2312标准共收录6763个汉字，其中一级汉字3755个，二级汉字3008个；同时收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的682个字符。</p><p>GB 2312的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆99.75%的使用频率。但对于人名、古汉语等方面出现的罕用字和繁体字，GB 2312不能处理，因此后来GBK及GB 18030汉字字符集相继出现以解决这些问题。</p><p> <strong>分区</strong></p><p>GB 2312中对所收汉字进行了“分区”处理，每区含有94个汉字／符号。这种表示方式也称为区位码。</p><table><thead><tr><th>分区范围</th><th>符号类型</th></tr></thead><tbody><tr><td>第01区</td><td>中文标点、数学符号以及一些特殊字符</td></tr><tr><td>第02区</td><td>各种各样的数学序号</td></tr><tr><td>第03区</td><td>全角西文字符</td></tr><tr><td>第04区</td><td>日文平假名</td></tr><tr><td>第05区</td><td>日文片假名</td></tr><tr><td>第06区</td><td>希腊字母表</td></tr><tr><td>第07区</td><td>俄文字母表</td></tr><tr><td>第08区</td><td>中文拼音字母表</td></tr><tr><td>第09区</td><td>制表符号</td></tr><tr><td>第10－15区</td><td>无字符</td></tr><tr><td>第16－55区</td><td>一级汉字（以拼音字母排序）</td></tr><tr><td>第56－87区</td><td>二级汉字（以部首笔画排序）</td></tr><tr><td>第88－94区</td><td>无字符</td></tr></tbody></table><p>举例来说，“啊”字是GB 2312之中的第一个汉字，它的区位码就是1601。<br>10–15区及88–94区则未有编码。</p><p><strong>编码格式</strong></p><p>在使用GB 2312的程序通常采用<a href="https://zh.wikipedia.org/wiki/EUC" target="_blank" rel="noopener">EUC</a>储存方法，以便兼容于ASCII。<br>每个汉字及符号以两个字节来表示。第一个字节称为“高位字节”，第二个字节称为“低位字节”。<br>“高位字节”使用了<code>0xA1–0xF7</code>（把01–87区的区号加上0xA0），“低位字节”使用了<code>0xA1–0xFE</code>（把01–94加上0xA0）。 由于一级汉字从16区起始，汉字区的“高位字节”的范围是0xB0–0xF7，“低位字节”的范围是0xA1–0xFE，占用的码位是72*94=6768。其中有5个空位是D7FA–D7FE。</p><h2 id="GBK字符集-amp-编码"><a href="#GBK字符集-amp-编码" class="headerlink" title="GBK字符集&amp;编码"></a>GBK字符集&amp;编码</h2><p><strong>汉字内码扩展规范</strong>，称<strong>GBK</strong>，全名为<strong>《汉字内码扩展规范(GBK)》1.0版</strong>，由中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订，国家技术监督局标准化司和电子工业部科技与质量监督司1995年12月15日联合以《技术标函[1995]229号》文件的形式公布。</p><p>GBK的<strong>K</strong>为汉语拼音Kuo Zhan（扩展）中“扩”字的声母。英文全称Chinese Internal Code Extension Specification。</p><p>GB 2312-80只收录6763个汉字，有不少汉字，如部分在GB 2312-80推出以后才简化的汉字（如“啰”），部分人名用字（如中国前总理朱镕基的“镕”字），台湾及香港使用的繁体字，日语及朝鲜语汉字等，并未有收录在内。GBK对GB 2312-80进行扩展, 总计拥有 23940 个码位，共收入21886个汉字和图形符号，其中汉字（包括部首和构件）21003 个，图形符号883 个。</p><p><strong>计算公式</strong></p><p>GBK码对字库中偏移量的计算公式为：</p><p>[(GBKH-0x81)<em>0xBE+(GBKL-0x41)]</em>(汉字离散后每个汉字点阵所占用的字节)</p><p><strong>编码格式</strong></p><p>GBK有一<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a>和双字节编码，00–7F范围内是一位，和<a href="https://baike.baidu.com/item/ASCII" target="_blank" rel="noopener">ASCII</a>保持一致，此范围内严格上说有96个字符和32个控制符号。</p><p>之后的双<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a>中，前一字节是双字节的第一位。总体上说第一<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a>的范围是81–FE（也就是不含80和FF），第二字节的一部分领域在40–7E，其他领域在80–FE。</p><p><img src="pic cache/gbk.png" alt=""></p><p>GBK向下完全兼容GB2312-80编码。支持GB2312-80编码不支持的部分中文姓，中文繁体，日文假名，还包括希腊字母以及俄语字母等字母。不过这种编码不支持韩国字，也是其在实际使用中与unicode编码相比欠缺的部分。</p><h2 id="GB-18030字符集-amp-编码"><a href="#GB-18030字符集-amp-编码" class="headerlink" title="GB 18030字符集&amp;编码"></a>GB 18030字符集&amp;编码</h2><p><strong>GB 18030</strong>，全称：国家标准GB 18030-2005《信息技术　中文编码字符集》，是中华人民共和国现时最新的内码字集，是GB 18030-2000《信息技术　信息交换用汉字编码字符集　基本集的扩充》的修订版。与GB 2312-1980完全兼容，与GBK基本兼容；支持GB 13000（93版等同于Unicode 1.1；2010版等同于Unicode 4.0）及Unicode的全部统一汉字，共收录汉字70,244个。</p><p>本规格的初版是由中华人民共和国信息产业部电子工业标准化研究所起草，由国家质量技术监督局于2000年3月17日发布。现行版本为国家质量监督检验总局和中国国家标准化管理委员会于2005年11月8日发布，2006年5月1日实施。</p><p>此标准内的单字节编码部分、双字节编码部分，和四字节编码部分收录的中日韩统一表意文字扩展A区汉字，为强制性标准。其他部分则属于规模性标准。在中华人民共和国境内所有软件产品，都需要支持这个同时包含单字节、双字节和四字节编码的规格。</p><p>GB 18030主要有以下特点：</p><ul><li>和UTF-8一样都采用多字节编码，每个字可以由1个、2个或4个字节组成。</li><li>编码空间庞大，最多可定义161万个字元。</li><li>支持中国国内少数民族的文字，不需要动用造字区。</li><li>汉字收录范围包含繁体汉字以及日韩汉字。</li></ul><p><strong>编码方式</strong></p><ul><li>单字节，其值从0x00到0x7F。</li><li>双字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x40到0xFE（不包括0x7F）。</li><li>四字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x30到0x39，第三个字节从0x81到0xFE，第四个字节从0x30到0x39。</li></ul><h2 id="Big5"><a href="#Big5" class="headerlink" title="Big5"></a>Big5</h2><p>在台湾、香港与澳门地区，使用的是繁体中文字符集。而1980年发布的GB2312面向简体中文字符集，并不支持繁体汉字。在这些使用繁体中文字符集的地区，一度出现过很多不同厂商提出的字符集编码，这些编码彼此互不兼容，造成了信息交流的困难。为统一繁体字符集编码，1984年，台湾五大厂商宏碁、神通、佳佳、零壹以及大众一同制定了一种繁体中文编码方案，因其来源被称为五大码，英文写作Big5，后来按英文翻译回汉字后，普遍被称为大五码。</p><p>大五码是一种繁体中文汉字字符集，其中繁体汉字13053个，808个标点符号、希腊字母及特殊符号。大五码的编码码表直接针对存储而设计，每个字符统一使用两个字节存储表示。第1字节范围81H－FEH，避开了同ASCII码的冲突，第2字节范围是40H－7EH和A1H－FEH。因为Big5的字符编码范围同GB2312字符的存储码范围存在冲突，所以在同一正文不能对两种字符集的字符同时支持。</p><p>Big5编码的分布如表1－5所示，Big5字符主要部分集中在三个段内：标点符号、希腊字母及特殊符号；常用汉字；非常用汉字。其余部分保留给其他厂商支持。</p><p>Big5字符编码分布表</p><table><thead><tr><th>编码范围</th><th>符号类别</th></tr></thead><tbody><tr><td>8140H－A0FEH</td><td>保留（用作造字区）</td></tr><tr><td>A140H－A3BFH</td><td>标点符号、希腊字母及特殊符号</td></tr><tr><td>A3C0H－A3FEH</td><td>保留（未开放用于造字区）</td></tr><tr><td>A440H－C67EH</td><td>常用汉字（先按笔划，再按部首排序）</td></tr><tr><td>C6A1H－C8FEH</td><td>保留（用作造字区）</td></tr><tr><td>C940H－F9D5H</td><td>非常用汉字（先按笔划，再按部首排序）</td></tr><tr><td>F9D6H－FEFEH</td><td>保留（用作造字区）</td></tr></tbody></table><p>Big5编码推出后，得到了繁体中文软件厂商的广泛支持，在使用繁体汉字的地区迅速普及使用。目前，Big5编码在台湾、香港、澳门及其他海外华人中普遍使用，成为了繁体中文编码的事实标准。在互联网中检索繁体中文网站，所打开的网页中，大多都是通过Big5编码产生的文档。</p><h2 id="Unicode字符集-amp-编码"><a href="#Unicode字符集-amp-编码" class="headerlink" title="Unicode字符集&amp;编码"></a>Unicode字符集&amp;编码</h2><p>世界上存在着多种编码方式，在ANSi编码下，同一个编码值，在不同的编码体系里代表着不同的字。在简体中文系统下，ANSI 编码代表 GB2312 编码，在日文操作系统下，ANSI 编码代表 JIS 编码，可能最终显示的是中文，也可能显示的是日文。在ANSI编码体系下，要想打开一个文本文件，不但要知道它的编码方式，还要安装有对应编码表，否则就可能无法读取或出现乱码。为什么电子邮件和网页都经常会出现乱码，就是因为信息的提供者可能是日文的ANSI编码体系和信息的读取者可能是中文的编码体系，他们对同一个二进制编码值进行显示，采用了不同的编码，导致乱码。</p><p>如果有一种编码，将世界上所有的符号都纳入其中，无论是英文、日文、还是中文等，大家都使用这个编码表，就不会出现编码不匹配现象。每个符号对应一个唯一的编码，乱码问题就不存在了。这就是Unicode编码。</p><p><strong>Unicode</strong>（中文：<strong>万国码</strong>、<strong>国际码</strong>、<strong>统一码</strong>、<strong>单一码</strong>）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。<br>Unicode伴随着通用字符集的标准而发展，同时也以书本的形式对外发表。Unicode至今仍在不断增修，每个新版本都加入更多新的字符。目前最新的版本为2016年6月21日公布的9.0.0,已经收入超过十万个字符（第十万个字符在2005年获采纳）。Unicode涵盖的数据除了视觉上的字形、编码方法、标准的字符编码外，还包含了字符特性，如大小写字母。</p><p>Unicode发展由非营利机构统一码联盟负责，该机构致力于让Unicode方案替换既有的字符编码方案。因为既有的方案往往空间非常有限，亦不适用于多语环境。</p><p>Unicode备受认可，并广泛地应用于电脑软件的国际化与本地化过程。有很多新科技，如可扩展置标语言、Java编程语言以及现代的操作系统，都采用Unicode编码。</p><p><strong>编码方式</strong></p><p>统一码的编码方式与ISO 10646的通用字符集概念相对应。目前实际应用的统一码版本对应于UCS-2，使用16位的编码空间。也就是每个字符占用2个字节。这样理论上一共最多可以表示2的16次方（即65536）个字符。基本满足各种语言的使用。实际上当前版本的统一码并未完全使用这16位编码，而是保留了大量空间以作为特殊使用或将来扩展。</p><p>Unicode原编码占用两个字节,在使用ASCII字符时,高位字节的8位始终为0,这会造成空间的浪费。为了避免这种浪费，Unicode的实现方式不同于编码方式。一个字符的Unicode编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对Unicode编码的实现方式有所不同。Unicode的实现方式称为<strong>Unicode转换格式</strong>（Unicode Transformation Format，简称为UTF）。<br>UTF-8、UTF-16、UTF-32都是将数字转换到程序数据的编码方案。</p><h2 id="UTF-8-编码"><a href="#UTF-8-编码" class="headerlink" title="UTF-8 编码"></a>UTF-8 编码</h2><p><strong>UTF-8</strong>（<strong>8-bit Unicode Transformation Format</strong>）是一种针对Unicode的可变长度字符编码，也是一种前缀码。其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部分修改，即可继续使用。</p><p>UTF-8使用一至六个字节为每个字符编码（尽管如此，2003年11月UTF-8被RFC 3629重新规范，只能使用原来Unicode定义的区域，U+0000到U+10FFFF，也就是说最多四个字节）：</p><ul><li>128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。</li><li>带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要两个字节编码（Unicode范围由U+0080至U+07FF）。</li><li>其他基本多文种平面（BMP）中的字符（这包含了大部分常用字，如大部分的汉字）使用三个字节编码（Unicode范围由U+0800至U+FFFF）。</li><li>其他极少使用的Unicode 辅助平面的字符使用四至六字节编码（Unicode范围由U+10000至U+1FFFFF使用四字节，Unicode范围由U+200000至U+3FFFFFF使用五字节，Unicode范围由U+4000000至U+7FFFFFFF使用六字节）。</li></ul><p>对上述提及的第四种字符而言，UTF-8使用四至六个字节来编码似乎太耗费资源了。但UTF-8对所有常用的字符都可以用三个字节表示，而且它的另一种选择，UTF-16编码，对前述的第四种字符同样需要四个字节来编码，所以要决定UTF-8或UTF-16哪种编码比较有效率，还要视所使用的字符的分布范围而定。</p><p><strong>编码方式</strong></p><ul><li>单字节字符的最高有效比特永远为0。</li><li>多字节序列中的首个字符组的几个最高有效比特决定了序列的长度。最高有效位为<code>110</code>的是2字节序列，而<code>1110</code>的是三字节序列，如此类推。</li><li>多字节序列中其余的字节中的首两个最高有效比特为<code>10</code>。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1894803-67a4baf55ee972b1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符编码 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
